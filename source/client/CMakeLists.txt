set(module_name_list "")
set(module_public_headers_path "")
set(module_dependencys "")

file(GLOB_RECURSE ModuleJsonFileList "*/module.json")
foreach(ModuleJsonFile IN LISTS ModuleJsonFileList)
    file(READ "${ModuleJsonFile}" json_string)
    string(REGEX REPLACE "/module.json" "" ModulePath ${ModuleJsonFile})
    string(JSON ModuleName GET ${json_string} name)
    string(JSON ModuleBuild GET ${json_string} build)
    string(JSON DependencysStr GET ${json_string} dependencys)
    file(GLOB_RECURSE all_headers "${ModulePath}/*.h")
    file(GLOB_RECURSE all_hpps "${ModulePath}/*.hpp")
    file(GLOB_RECURSE all_sources "${ModulePath}/*.cpp")
    file(GLOB_RECURSE public_headers "${ModulePath}/Public/*.h")

    get_filename_component(ModuleLastPath ${ModulePath} DIRECTORY)

    source_group(TREE "${ModulePath}" FILES ${all_headers} ${all_sources} ${all_hpps} ${ModuleJsonFile})

    if(ModuleBuild STREQUAL "lib")
        add_library(${ModuleName} ${all_headers} ${all_sources} ${all_hpps})
    elseif(ModuleBuild STREQUAL "dll")
        add_library(${ModuleName} SHARED ${all_headers} ${all_sources} ${all_hpps})
    elseif(ModuleBuild STREQUAL "exe")
        add_executable(${ModuleName} ${all_headers} ${all_sources} ${all_hpps})
        target_link_libraries(${ModuleName} PRIVATE ${3rd_party_lib})
    else()
        message(FATAL_ERROR "Unknown BuildOption: ${ModuleBuild}")
    endif()

    set_target_properties(${ModuleName} PROPERTIES FOLDER "Modules")

    target_sources(${ModuleName} PRIVATE ${ModuleJsonFile})

    target_include_directories(${ModuleName} PRIVATE ${3rd_party_include})
    target_include_directories(${ModuleName} PRIVATE ${ModulePath}/Public)
    target_include_directories(${ModuleName} PRIVATE ${ModulePath})

    list(APPEND module_name_list ${ModuleName})
    list(APPEND module_public_headers_path ${ModulePath}/Public)
    list(APPEND module_dependencys ${DependencysStr})

    message(STATUS "Module_Json: ${ModuleJsonFile}")
    message(STATUS "ModuleName: ${ModuleName}")
    message(STATUS "ModulePath: ${ModulePath}")
    message(STATUS "ModuleLastPath: ${ModuleLastPath}")
    message(STATUS "ModuleDependencys: ${Dependencys}")
endforeach(ModuleJsonFile)

message(STATUS "module_dependency: ${module_dependencys}")
message(STATUS "-------------------------------------------------------------")

foreach(ModuleName IN LISTS module_name_list)
    message(STATUS "Begin resolve dependency of Module: ${ModuleName}")
    list(FIND module_name_list ${ModuleName} ModuleIndex)
    list(GET module_dependencys ${ModuleIndex} DependencysStr)
    string(REGEX MATCHALL "\"([^\"]+)\"" DependencysStr ${DependencysStr})
    string(LENGTH "${DependencysStr}" length)
    if(length EQUAL 0)
        continue()
    endif()
    string(REPLACE "\"" " " ModuleDependencys ${DependencysStr})
    separate_arguments(ModuleDependencys)
    message(STATUS "----ModuleDependency: ${ModuleDependencys}")
    foreach(ModuleDependencyName IN LISTS ModuleDependencys)
        string(LENGTH "${ModuleDependencyName}" length)
        if(length EQUAL 0)
            continue()
        endif()
        message(STATUS "--------DependencyModuleName: ${ModuleDependencyName}")
        list(FIND module_name_list ${ModuleDependencyName} ModuleDependencyIndex)
        list(GET module_public_headers_path ${ModuleDependencyIndex} dependencyPublicHeaders)
        target_include_directories(${ModuleName} PRIVATE ${dependencyPublicHeaders})
        target_link_libraries(${ModuleName} PRIVATE ${ModuleDependencyName})
    endforeach(ModuleDependencyName)
endforeach(ModuleName)